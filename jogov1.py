import streamlit as st
import re

# ------------------------------
# FUN√á√ïES AUXILIARES
# ------------------------------

# Valida√ß√£o de e-mail
def validar_email(email):
    regex = r"[^@]+@[^@]+\.[^@]+"
    return re.match(regex, email)

# Fun√ß√£o para obter um √≠cone para cada interesse
def get_icon(interest):
    i = interest.lower()
    if "cinema" in i:
        return "üé¨"
    elif "m√∫sica" in i:
        return "üéµ"
    elif "fotografia" in i:
        return "üì∑"
    elif any(x in i for x in ["arte", "design", "ilustra√ß√£o", "pintura", "escultura", "moda", "anima√ß√£o", "publicidade", "comunica√ß√£o visual", "arquitetura"]):
        return "üé®"
    elif any(x in i for x in ["programa√ß√£o", "software", "jogos", "rob√≥tica", "intelig√™ncia artificial", "ciberseguran√ßa", "hardware", "redes"]):
        return "üíª"
    elif any(x in i for x in ["empreendedorismo", "neg√≥cios", "finan√ßas", "investimentos", "marketing", "planeamento", "gest√£o"]):
        return "üíº"
    elif any(x in i for x in ["psicologia", "comportamento", "neuro", "bem-estar", "autoconhecimento", "sociologia", "antropologia"]):
        return "üß†"
    elif any(x in i for x in ["servi√ßo social", "direitos", "comunit√°rio", "voluntariado", "sustentabilidade", "cidadania", "educa√ß√£o", "pol√≠ticas"]):
        return "ü§ù"
    elif any(x in i for x in ["comunica√ß√£o empresarial", "rela√ß√µes p√∫blicas", "m√≠dias sociais", "eventos", "branding", "networking", "lideran√ßa"]):
        return "üì¢"
    elif any(x in i for x in ["reportagem", "investiga√ß√£o", "jornalismo", "reda√ß√£o", "telejornalismo", "entrevistas"]):
        return "üì∞"
    else:
        return "‚≠ê"

# Fun√ß√£o para alternar (toggle) um interesse ao clicar no cart√£o
def toggle_interest(interest):
    if interest in st.session_state.selected_interesses:
        st.session_state.selected_interesses.remove(interest)
    else:
        st.session_state.selected_interesses.append(interest)
    st.rerun()

# Fun√ß√£o para calcular os cursos recomendados (l√≥gica com pontua√ß√£o ponderada)
def obter_cursos_recomendados(selecionados):
    recomendados = {}
    for curso, keywords in course_keywords.items():
        score = 0
        for inter in selecionados:
            inter_clean = inter.lower().strip()
            for kw in keywords:
                kw_clean = kw.lower().strip()
                if inter_clean == kw_clean:
                    score += 2  # correspond√™ncia exata
                elif kw_clean in inter_clean:
                    score += 1  # correspond√™ncia parcial
        if score > 0:
            recomendados[curso] = score
    return recomendados

# ------------------------------
# CONFIGURA√á√ÉO INICIAL
# ------------------------------
st.set_page_config(page_title="Orienta√ß√£o Vocacional", layout="wide")

# Inicializa√ß√£o das vari√°veis de sess√£o
if "page" not in st.session_state:
    st.session_state.page = "selecao_interesses"
if "selected_interesses" not in st.session_state:
    st.session_state.selected_interesses = []
if "verInteressesDev" not in st.session_state:
    st.session_state.verInteressesDev = False  # por defeito, n√£o mostra a lista de interesses

# Lista de interesses (80 cart√µes)
interesses = [
    # Linha 1
    "Arte Digital", "Design Gr√°fico", "Fotografia", "Cinema", "M√∫sica", "Literatura", "Teatro", "Dan√ßa", "Pintura", "Escultura",
    # Linha 2
    "Anima√ß√£o", "Moda", "Publicidade", "Comunica√ß√£o Visual", "Arquitetura", "Ilustra√ß√£o", "Design de Interiores", "Artes Pl√°sticas", "Escultura Contempor√¢nea", "Artes C√™nicas",
    # Linha 3
    "Programa√ß√£o", "Desenvolvimento de Software", "Jogos Digitais", "Realidade Virtual", "Rob√≥tica", "Intelig√™ncia Artificial", "Ci√™ncia de Dados", "Ciberseguran√ßa", "Hardware", "Redes de Computadores",
    # Linha 4
    "Empreendedorismo", "Startups", "Inova√ß√£o", "Marketing Digital", "Neg√≥cios", "Finan√ßas", "Investimentos", "Economia", "Planeamento Estrat√©gico", "Gest√£o de Projectos",
    # Linha 5
    "Psicologia", "Sociologia", "Antropologia", "Comportamento Humano", "Sa√∫de Mental", "Neuroci√™ncia", "Psicoterapia", "Desenvolvimento Pessoal", "Bem-estar", "Autoconhecimento",
    # Linha 6
    "Ci√™ncias Sociais", "Servi√ßo Social", "Ativismo", "Direitos Humanos", "Educa√ß√£o", "Pol√≠ticas P√∫blicas", "Engajamento Comunit√°rio", "Voluntariado", "Sustentabilidade", "Cidadania",
    # Linha 7
    "Comunica√ß√£o Empresarial", "Rela√ß√µes P√∫blicas", "Assessoria de Imprensa", "M√≠dias Sociais", "Eventos", "Branding", "Marketing de Influ√™ncia", "Comunica√ß√£o Organizacional", "Lideran√ßa", "Networking",
    # Linha 8
    "Reportagem", "Investiga√ß√£o", "Reda√ß√£o Jornal√≠stica", "M√≠dia Digital", "Telejornalismo", "Edi√ß√£o de V√≠deo", "Fotografia Jornal√≠stica", "Entrevistas", "Recrutamento", "Forma√ß√£o"
]

# Lista de cursos dispon√≠veis
cursos = [
    "Design de Comunica√ß√£o",
    "Multim√©dia",
    "Jornalismo",
    "Comunica√ß√£o Empresarial",
    "Empreendedorismo",
    "Gest√£o",
    "Gest√£o de Recursos Humanos",
    "Psicologia",
    "Servi√ßo Social",
    "Inform√°tica"
]

# Dicion√°rio de palavras-chave para cada curso
course_keywords = {
    "Design de Comunica√ß√£o": ["arte", "design", "fotografia", "ilustra√ß√£o", "pintura", "escultura", "moda", "publicidade", "comunica√ß√£o visual"],
    "Multim√©dia": ["anima√ß√£o", "cinema", "m√∫sica", "edi√ß√£o de v√≠deo", "multim√©dia", "design gr√°fico", "fotografia"],
    "Jornalismo": ["reportagem", "investiga√ß√£o", "reda√ß√£o", "entrevistas", "m√≠dia digital", "telejornalismo"],
    "Comunica√ß√£o Empresarial": ["comunica√ß√£o empresarial", "marketing", "branding", "rela√ß√µes p√∫blicas", "m√≠dias sociais", "eventos", "networking"],
    "Empreendedorismo": ["empreendedorismo", "startups", "inova√ß√£o", "neg√≥cios", "planeamento estrat√©gico"],
    "Gest√£o": ["gest√£o", "planeamento", "lideran√ßa", "gest√£o de projectos", "neg√≥cios", "finan√ßas", "investimentos", "economia"],
    "Gest√£o de Recursos Humanos": ["recursos humanos", "forma√ß√£o", "desenvolvimento de talentos", "cultura organizacional", "diversidade", "inclus√£o"],
    "Psicologia": ["psicologia", "comportamento humano", "neuroci√™ncia", "bem-estar", "autoconhecimento"],
    "Servi√ßo Social": ["servi√ßo social", "direitos humanos", "engajamento comunit√°rio", "voluntariado", "sustentabilidade", "cidadania"],
    "Inform√°tica": ["programa√ß√£o", "desenvolvimento de software", "jogos digitais", "realidade virtual", "rob√≥tica", "intelig√™ncia artificial", "ci√™ncia de dados", "ciberseguran√ßa", "hardware", "redes de computadores"]
}

# Dicion√°rio de √≠cones para os cursos
course_icons = {
    "Design de Comunica√ß√£o": "üé®",
    "Multim√©dia": "üñ•Ô∏è",
    "Jornalismo": "üì∞",
    "Comunica√ß√£o Empresarial": "üì¢",
    "Empreendedorismo": "üíº",
    "Gest√£o": "üìä",
    "Gest√£o de Recursos Humanos": "ü§ù",
    "Psicologia": "üß†",
    "Servi√ßo Social": "ü§ù",
    "Inform√°tica": "üíª"
}

# ------------------------------
# P√ÅGINA 1: SELE√á√ÉO DE INTERESSES
# ------------------------------
if st.session_state.page == "selecao_interesses":
    st.markdown(
        '<div class="main-header"><h1>Bem-vindo √† Orienta√ß√£o Vocacional do ISMT</h1><p>Descobre os cursos que combinam com os teus interesses!</p></div>',
        unsafe_allow_html=True
    )
    st.markdown("### Seleciona os teus hobbies e interesses (clicando nos cart√µes):")
    
    total_interesses = len(interesses)
    # Ajusta o n√∫mero de colunas para maximizar a visibilidade (ex: 10 colunas)
    colunas_por_linha = 10  
    linhas = total_interesses // colunas_por_linha
    
    # Organiza os cart√µes numa grelha
    for i in range(linhas):
        cols = st.columns(colunas_por_linha)
        for j in range(colunas_por_linha):
            index = i * colunas_por_linha + j
            if index < total_interesses:
                inter = interesses[index]
                icon = get_icon(inter)
                label = f"{icon} {inter}"
                if inter in st.session_state.selected_interesses:
                    label = f"‚úÖ {label}"
                # Cada bot√£o, ao ser clicado, alterna o interesse
                cols[j].button(label, key=f"card_{index}", on_click=lambda inter=inter: toggle_interest(inter))
    
    # Mostra a lista de interesses selecionados apenas se a flag verInteressesDev for True
    if st.session_state.verInteressesDev:
        st.markdown("### Interesses Selecionados:")
        st.write(st.session_state.selected_interesses)
    
    if st.button("Ver cursos compat√≠veis com os meus interesses"):
        st.session_state.page = "resultado_cursos"
        st.rerun()

# ------------------------------
# P√ÅGINA 2: RESULTADOS E CONTATO
# ------------------------------
elif st.session_state.page == "resultado_cursos":
    st.markdown(
        '<div class="main-header"><h1>Cursos Compat√≠veis</h1><p>Estes cursos combinam com os teus interesses!</p></div>',
        unsafe_allow_html=True
    )
    
    # Bot√£o para voltar √† sele√ß√£o de interesses
    if st.button("Voltar √† sele√ß√£o de interesses"):
        st.session_state.page = "selecao_interesses"
        st.rerun()
    
    recomendados = obter_cursos_recomendados(st.session_state.selected_interesses)
    max_score = max(recomendados.values()) if recomendados else 0
    threshold = 0.5 * max_score

    for curso in cursos:
        if curso in recomendados:
            score = recomendados[curso]
            icon = course_icons.get(curso, "‚≠ê")
            if score >= threshold:
                st.markdown(f"**:star: {icon} {curso} (compatibilidade: {score})**")
            else:
                st.markdown(f"{icon} {curso} (compatibilidade: {score})")
        else:
            st.markdown(curso)

    st.markdown("---")
    st.markdown("Para mais informa√ß√µes, indica o teu nome e e-mail:")
    nome = st.text_input("Nome")
    email = st.text_input("E-mail")

    if st.button("Enviar"):
        if nome and email:
            if not validar_email(email):
                st.error("Por favor, introduz um e-mail v√°lido.")
            else:
                st.success("Obrigado! Em breve entraremos em contacto.")
        else:
            st.error("Por favor, preenche ambos os campos: nome e e-mail.")
